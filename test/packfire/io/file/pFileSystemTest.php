<?php

pload('packfire.io.file.pFileSystem');

/**
 * Test class for pFileSystem.
 * Generated by PHPUnit on 2012-06-28 at 02:51:24.
 */
class pFileSystemTest extends PHPUnit_Framework_TestCase {    

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers pFileSystem::fileExists
     */
    public function testFileExists() {
        $this->assertTrue(pFileSystem::fileExists(__FILE__));
        $this->assertFalse(pFileSystem::fileExists(__DIR__));
        $this->assertFalse(pFileSystem::fileExists(__FILE__ . 'lalala'));
    }

    /**
     * @covers pFileSystem::pathExists
     */
    public function testPathExists() {
        $this->assertTrue(pFileSystem::pathExists(__DIR__));
        $this->assertFalse(pFileSystem::pathExists(__FILE__));
        $this->assertFalse(pFileSystem::pathExists(__DIR__ . 'lalala'));
    }

    /**
     * @covers pFileSystem::freeSpace
     */
    public function testFreeSpace() {
        $this->assertInternalType('float', pFileSystem::freeSpace(__DIR__));
    }

    /**
     * @covers pFileSystem::totalSpace
     */
    public function testTotalSpace() {
        $this->assertInternalType('float', pFileSystem::totalSpace(__DIR__));
    }

    /**
     * @covers pFileSystem::pathSearch
     */
    public function testPathSearch() {
        $pattern = 'p*.php';
        $list = pFileSystem::pathSearch($pattern)->toArray();
        $list2 = glob($pattern);
        $this->assertEquals($list2, $list);
    }

    /**
     * @covers pFileSystem::pathSearch
     */
    public function testPathSearch2() {
        $pattern = 'p*.php';
        $list = pFileSystem::pathSearch($pattern, GLOB_NOSORT)->toArray();
        $list2 = glob($pattern, GLOB_NOSORT);
        $this->assertEquals($list2, $list);
    }

}