<?php

pload('packfire.text.pInflector');

/**
 * Test class for pInflector.
 * Generated by PHPUnit on 2012-04-25 at 07:01:31.
 */
class pInflectorTest extends PHPUnit_Framework_TestCase {
    
    /**
     *
     * @var array
     */
    private $testCases;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->testCases = array(
            'hippos' => 'hippo',
            'donkeys' => 'donkey',
            'men' => 'man',
            'women' => 'woman',
            'keys' => 'key',
            'hackers' => 'hacker',
            'Dummies' => 'Dummy',
            'ALUMNI' => 'ALUMNUS',
            'pennies' => 'penny',
            'Fungi' => 'Fungus'
        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }
    
    /**
     * @covers pInflector::firstUpperCase 
     */
    public function testFirstUpperCase(){
        $this->assertEquals(4, pInflector::firstUpperCase('testRun'));
        $this->assertEquals(6, pInflector::firstUpperCase('incaseTestRun'));
        $this->assertEquals(false, pInflector::firstUpperCase('home'));
        $this->assertEquals(0, pInflector::firstUpperCase('Home'));
    }

    /**
     * @covers pInflector::isWordUpperCase
     */
    public function testIsWordUpperCase() {
        $this->assertTrue(pInflector::isWordUpperCase('LMAO'));
        $this->assertTrue(pInflector::isWordUpperCase('LOL!'));
        $this->assertTrue(pInflector::isWordUpperCase('MA0L1A:'));
        $this->assertFalse(pInflector::isWordUpperCase('MaYBe'));
        $this->assertFalse(pInflector::isWordUpperCase('Seriously!'));
        $this->assertFalse(pInflector::isWordUpperCase('real nuts'));
    }

    /**
     * @covers pInflector::isWordLowerCase
     */
    public function testIsWordLowerCase() {
        $this->assertFalse(pInflector::isWordLowerCase('LMAO'));
        $this->assertFalse(pInflector::isWordLowerCase('LOL!'));
        $this->assertFalse(pInflector::isWordLowerCase('MA0L1A:'));
        $this->assertFalse(pInflector::isWordLowerCase('MaYBe'));
        $this->assertFalse(pInflector::isWordLowerCase('Seriously!'));
        $this->assertTrue(pInflector::isWordLowerCase('real nuts'));
        $this->assertTrue(pInflector::isWordLowerCase('sweet!'));
        $this->assertTrue(pInflector::isWordLowerCase('i am 40 years old.'));
    }

    /**
     * @covers pInflector::isCapitalLetterWord
     */
    public function testIsCapitalLetterWord() {
        $this->assertTrue(pInflector::isCapitalLetterWord('Good'));
        $this->assertTrue(pInflector::isCapitalLetterWord('Great!'));
        $this->assertTrue(pInflector::isCapitalLetterWord('H4ppy n0w?'));
        $this->assertFalse(pInflector::isCapitalLetterWord('aGood'));
        $this->assertFalse(pInflector::isCapitalLetterWord('bGreat!'));
        $this->assertFalse(pInflector::isCapitalLetterWord('cH4ppy n0w?'));
    }

    /**
     * @covers pInflector::singular
     */
    public function testSingular() {
        $this->testCases = array_merge($this->testCases, array(
            'man' => 'man',
            'key' => 'key',
            'mummy' => 'mummy',
            'yatch' => 'yatch'
        ));
        foreach($this->testCases as $plural => $singular){
            $this->assertEquals($singular, pInflector::singular($plural));
        }
    }

    /**
     * @covers pInflector::plural
     */
    public function testPlural() {
        $this->testCases = array_merge($this->testCases, array(
            'men' => 'men',
            'keys' => 'keys',
            'mummies' => 'mummies',
            'yatches' => 'yatches'
        ));
        foreach($this->testCases as $plural => $singular){
            $this->assertEquals($plural, pInflector::plural($singular));
        }
    }

    /**
     * @covers pInflector::quantify
     */
    public function testQuantify() {
        $quantifier = 1;
        foreach($this->testCases as $plural => $singular){
            $this->assertEquals($singular, pInflector::quantify($quantifier, $singular));
        }
        $quantifier = 5;
        foreach($this->testCases as $plural => $singular){
            $this->assertEquals($plural, pInflector::quantify($quantifier, $singular));
        }
        $quantifier = 100;
        foreach($this->testCases as $plural => $singular){
            $this->assertEquals($plural, pInflector::quantify($quantifier, $singular));
            $this->assertEquals($singular, pInflector::quantify($quantifier, $singular, $singular));
        }
        $this->assertEquals('aaa', pInflector::quantify(2, 'bbb', 'aaa'));
        $this->assertEquals('bbb', pInflector::quantify(1, 'bbb', 'aaa'));
    }

}