<?php
namespace Packfire\Core;

/**
 * Test class for ObjectObserver.
 * Generated by PHPUnit on 2012-08-04 at 03:00:58.
 */
class ObjectObserverTest extends \PHPUnit_Framework_TestCase {

    public $title;

    public $call = false;

    function call(){
        $this->call = true;
    }

    static function callStatic(){
        return 'test';
    }

    /**
     * @var ObjectObserver
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new ObjectObserver($this);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @covers ObjectObserver::model
     */
    public function testModel() {
        $this->assertNotEmpty($this->object->model());
        $this->assertEquals($this, $this->object->model());
    }

    /**
     * @covers ObjectObserver::on
     */
    public function testOn() {
        $this->object->on('change', array($this, 'changeListener'));
        $this->changed = false;
        $this->object->title = 'test';
        $this->assertTrue($this->changed);
    }

    private $changed;

    public function changeListener($sender, $args){
        if($args[0] == 'title' && $args[1] == 'test'){
            $this->assertEquals($this->object, $sender);
            $this->changed = true;
        }
    }

    /**
     * @covers ObjectObserver::__set
     */
    public function test__set() {
        $msg = 'test title';
        $this->assertEmpty($this->title);
        $this->object->title = $msg;
        $this->assertEquals($msg, $this->title);
    }

    /**
     * @covers ObjectObserver::__get
     */
    public function test__get() {
        $msg = 'test title';
        $this->assertEmpty($this->object->title);
        $this->title = $msg;
        $this->assertEquals($msg, $this->object->title);
    }

    /**
     * @covers ObjectObserver::__isset
     */
    public function test__isset() {
        $msg = 'test title';
        $this->assertFalse(isset($this->object->title));
        $this->title = $msg;
        $this->assertTrue(isset($this->object->title));
    }

    /**
     * @covers ObjectObserver::__unset
     */
    public function test__unset() {
        $msg = 'test title';
        $this->title = $msg;
        $this->assertTrue(isset($this->object->title));
        unset($this->object->title);
        $this->assertFalse(isset($this->object->title));
    }

    /**
     * @covers ObjectObserver::__call
     */
    public function test__call() {
        $this->assertFalse($this->call);
        $this->object->call();
        $this->assertTrue($this->call);
    }

}