<?php
namespace Packfire\Net\Http;

/**
 * Test class for Url.
 * Generated by PHPUnit on 2012-02-15 at 18:02:01.
 */
class UrlTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var \Packfire\Net\Http\Url
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Url('ftp://user:pwd@git.example.com:2103/path/test.html?query=1#true');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers \Packfire\Net\Http\Url::fragment
     */
    public function testFragment()
    {
        $this->assertEquals('true', $this->object->fragment());
    }

    /**
     * @covers \Packfire\Net\Http\Url::host
     */
    public function testHost()
    {
        $this->assertEquals('git.example.com', $this->object->host());
    }

    /**
     * @covers \Packfire\Net\Http\Url::pass
     */
    public function testPass()
    {
        $this->assertEquals('pwd', $this->object->pass());
    }

    /**
     * @covers \Packfire\Net\Http\Url::port
     */
    public function testPort()
    {
        $this->assertEquals('2103', $this->object->port());
    }

    /**
     * @covers \Packfire\Net\Http\Url::path
     */
    public function testPath()
    {
        $this->assertEquals('/path/test.html', $this->object->path());
    }

    /**
     * @covers \Packfire\Net\Http\Url::scheme
     */
    public function testScheme()
    {
        $this->assertEquals('ftp', $this->object->scheme());
    }

    /**
     * @covers \Packfire\Net\Http\Url::user
     */
    public function testUser()
    {
        $this->assertEquals('user', $this->object->user());
    }

    /**
     * @covers \Packfire\Net\Http\Url::params
     */
    public function testParams()
    {
        $this->assertInstanceOf('Packfire\Collection\Map', $this->object->params());
        $this->assertEquals(1, $this->object->params()->get('query'));
    }

    /**
     * @covers \Packfire\Net\Http\Url::__toString
     */
    public function testToString()
    {
        $this->assertEquals(
            'ftp://user:pwd@git.example.com:2103/path/test.html'
            . '?query=1#true',
            $this->object .''
        );
    }

    /**
     * @covers \Packfire\Net\Http\Url::encode
     */
    public function testEncode()
    {
        $this->assertEquals('%3C', Url::encode('<'));
        $this->assertEquals('%3E', Url::encode('>'));
        $this->assertEquals('%26', Url::encode('&'));
        $this->assertEquals('%2B', Url::encode('+'));
        $this->assertEquals('+', Url::encode(' '));
    }

    /**
     * @covers \Packfire\Net\Http\Url::decode
     */
    public function testDecode()
    {
        $this->assertEquals('<', Url::decode('%3C'));
        $this->assertEquals('>', Url::decode('%3E'));
        $this->assertEquals('&', Url::decode('%26'));
        $this->assertEquals('+', Url::decode('%2B'));
        $this->assertEquals(' ', Url::decode('+'));
    }

    /**
     * @covers \Packfire\Net\Http\Url::combine
     */
    public function testCombine()
    {
        $final = Url::combine('http://example.com/test', '../object');
        $this->assertEquals('http://example.com/object', (string) $final);
    }

    /**
     * @covers \Packfire\Net\Http\Url::combine
     */
    public function testCombine2()
    {
        $final = Url::combine('/test/data', '../object/true');
        $this->assertEquals('/test/object/true', (string) $final);
    }
}
