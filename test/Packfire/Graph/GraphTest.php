<?php
namespace Packfire\Graph;

use Packfire\Collection\Map;

/**
 * Test class for Graph.
 * Generated by PHPUnit on 2012-04-22 at 12:43:16.
 */
class GraphTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var \Packfire\Graph\Graph
     */
    protected $graph;

    /**
     * @var \Packfire\Graph\Vertex
     */
    protected $nodeA;

    /**
     * @var \Packfire\Graph\Vertex
     */
    protected $nodeB;

    /**
     * @var \Packfire\Graph\Vertex
     */
    protected $nodeC;

    /**
     * @var \Packfire\Graph\Vertex
     */
    protected $nodeD;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->graph = new Graph;

        $this->nodeA = new Vertex('A');
        $this->nodeB = new Vertex('B');
        $this->nodeC = new Vertex('C');
        $this->nodeD = new Vertex('D');

        $this->graph->add($this->nodeA);
        $this->graph->add($this->nodeB);
        $this->graph->add($this->nodeC);
        $this->graph->add($this->nodeD);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers \Packfire\Graph\Graph::add
     */
    public function testAddGet()
    {
        $test = new Vertex('test');
        $aVertex = new Vertex('a');
        $this->graph->add($test);
        $this->graph->add($aVertex);
        $this->assertEquals($test, $this->graph->get('test'));
        $this->assertEquals($aVertex, $this->graph->get('a'));
        $this->assertCount(6, $this->graph->vertices());
    }

    /**
     * @covers \Packfire\Graph\Graph::vertices
     */
    public function testVertices()
    {
        $this->assertCount(4, $this->graph->vertices());
        $this->assertTrue($this->graph->vertices() instanceof Map);
    }

    /**
     * @covers \Packfire\Graph\Graph::find
     */
    public function testFindSimple()
    {
        $this->nodeA->connect($this->nodeB, 5);

        $path = $this->graph->find('A', 'B');
        $this->assertEquals(5, $path->distance());
        $this->assertEquals(0, $path->distance(0));
        $this->assertEquals(
            array($this->nodeA, $this->nodeB),
            $path->vertices()->toArray()
        );
    }

    /**
     * @covers \Packfire\Graph\Graph::find
     */
    public function testFindComplex()
    {
        $this->nodeA->connect($this->nodeB, 5);
        $this->nodeA->connect($this->nodeC, 3);
        $this->nodeC->connect($this->nodeB, 1);
        $this->nodeB->connect($this->nodeD, 3);
        $this->nodeC->connect($this->nodeD, 3);

        $path = $this->graph->find('A', 'D');
        $this->assertEquals(6, $path->distance());
        $this->assertEquals(0, $path->distance(0));
        $this->assertEquals(3, $path->distance(1));
        $this->assertEquals(6, $path->distance(2));
        $this->assertEquals(
            array($this->nodeA, $this->nodeC, $this->nodeD),
            $path->vertices()->toArray()
        );
    }
}
