<?php
namespace Packfire\Graph;

/**
 * Test class for Vertex.
 * Generated by PHPUnit on 2012-10-12 at 09:06:35.
 */
class VertexTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var \Packfire\Graph\Vertex
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Vertex(5);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @covers \Packfire\Graph\Vertex::connect
     */
    public function testConnect() {
        $this->object->connect(new Vertex(6), 10);
        $this->assertCount(1, $this->object->connections());
        $this->assertEquals(6, $this->object->connections()->keys()->first());
        $this->assertEquals(10, $this->object->connections()->first());
    }

    /**
     * @covers \Packfire\Graph\Vertex::connect
     * @expectedException \Packfire\Exception\InvalidArgumentException
     */
    public function testConnectFail() {
        $this->object->connect(new Vertex(5), 10);
    }

    /**
     * @covers \Packfire\Graph\Vertex::connect
     * @expectedException \Packfire\Exception\InvalidArgumentException
     */
    public function testConnectFail2() {
        $this->object->connect($this->object, 10);
    }

    /**
     * @covers \Packfire\Graph\Vertex::id
     */
    public function testId() {
        $this->assertEquals(5, $this->object->id());
    }

    /**
     * @covers \Packfire\Graph\Vertex::connections
     */
    public function testConnections() {
        $this->assertInstanceOf('Packfire\Collection\Map', $this->object->connections());
        $this->assertCount(0, $this->object->connections());
    }

    /**
     * @covers \Packfire\Graph\Vertex::potential
     */
    public function testPotential() {
        $this->assertNull($this->object->from());
        $this->assertEquals(0, $this->object->potential());
        $this->object->setPotential(5, null);
        $this->assertEquals(5, $this->object->potential());
        $this->object->setPotential(10, null);
        $this->assertEquals(5, $this->object->potential());
        $this->object->setPotential(3, null);
        $this->assertEquals(3, $this->object->potential());
        $this->assertNull($this->object->from());
    }

    /**
     * @covers \Packfire\Graph\Vertex::from
     */
    public function testFrom() {
        $this->assertNull($this->object->from());
        $this->object->setPotential(5, $this->object);
        $this->assertEquals($this->object, $this->object->from());
    }

    /**
     * @covers \Packfire\Graph\Vertex::reset
     */
    public function testReset() {
        $this->object->setPotential(5, $this->object);
        $this->object->reset();
        $this->assertNull($this->object->from());
    }

}