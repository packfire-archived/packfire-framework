<?php
namespace Packfire\Collection;

/**
 * Test class for ArrayList.
 * Generated by PHPUnit on 2012-02-16 at 04:36:27.
 */
class ArrayListTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var ArrayList
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new ArrayList(array(3, 5, 8));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @covers ArrayList::count
     */
    public function testCount() {
        $this->assertEquals(3, $this->object->count());
        $this->assertEquals(3, count($this->object));
        $this->object->add(8);
        $this->object->add(1);
        $this->assertEquals(5, $this->object->count());
        $this->assertEquals(5, count($this->object));
    }

    /**
     * @covers ArrayList::iterator
     */
    public function testIterator() {
        $this->assertInstanceof('Packfire\Collection\Iterator', $this->object->iterator());
    }

    /**
     * @covers ArrayList::add
     */
    public function testAdd() {
        $text = 'sam';
        $key = $this->object->add($text);
        $this->assertEquals($text, $this->object->get($key));
        $this->assertEquals($text, $this->object[$key]);
        $text = 'fire';
        $key = $this->object->add($text);
        $this->assertEquals($text, $this->object->get($key));
        $this->assertEquals($text, $this->object[$key]);
    }

    /**
     * @covers ArrayList::clear
     */
    public function testClear() {
        $this->assertCount(3, $this->object);
        $this->object->clear();
        $this->assertCount(0, $this->object);
        $this->assertEquals(array(), $this->object->toArray());
    }

    /**
     * @covers ArrayList::contains
     */
    public function testContains() {
        $this->assertTrue($this->object->contains(5));
        $this->assertTrue($this->object->contains(3));
        $this->assertFalse($this->object->contains(2));
        $this->assertFalse($this->object->contains(22));
    }

    /**
     * @covers ArrayList::get
     */
    public function testGet() {
        $this->assertEquals(5, $this->object[1]);
        $this->assertEquals(8, $this->object[2]);
        $this->assertEquals(5, $this->object->get(1));
        $this->assertEquals(8, $this->object->get(2));
        $this->assertEquals($this->object->get(0), $this->object[0]);
        $this->assertEquals(null, $this->object->get(20));
    }

    /**
     * @covers ArrayList::indexOf
     */
    public function testIndexOf() {
        $this->assertEquals(1, $this->object->indexOf(5));
        $this->assertEquals(2, $this->object->indexOf(8));
        $this->assertEquals(null, $this->object->indexOf(100));
    }

    /**
     * @covers ArrayList::indexesOf
     */
    public function testIndexesOf() {
        $this->object->add(5);
        $indexes = $this->object->indexesOf(5);
        $this->assertEquals(1, $indexes[0]);
        $this->assertEquals(3, $indexes[1]);
    }

    /**
     * @covers ArrayList::lastIndexOf
     */
    public function testLastIndexOf() {
        $this->object->add(5);
        $this->assertEquals(3, $this->object->lastIndexOf(5));
    }

    /**
     * @covers ArrayList::remove
     */
    public function testRemove() {
        $this->object->add(5);
        $this->object->add(5);
        $this->object->add(5);
        $this->object->remove(5);
        $this->assertEquals(2, $this->object->count());
        $this->assertEquals(8, $this->object[1]);
    }

    /**
     * @covers ArrayList::removeAll
     */
    public function testRemoveAll() {
        $this->object->add(5);
        $this->object->add(5);
        $this->object->add(3);
        $this->object->removeAll(5, 3, 56);
        $this->assertEquals(1, $this->object->count());
        $this->assertEquals(8, $this->object[0]);

        $this->object->add(3);
        $this->object->add(5);
        $this->object->add(3);
        $this->object->add(5);
        $this->object->add(3);
        $this->object->removeAll(array(3, 5));
        $this->assertEquals(1, $this->object->count());
        $this->assertEquals(8, $this->object[0]);

        $this->object->add(3);
        $this->object->add(5);
        $this->object->add(5);
        $this->object->add(3);
        $this->object->add(3);
        $this->object->add(7);
        $this->object->removeAll(new ArrayList(array(3, 5)));
        $this->assertEquals(2, $this->object->count());
        $this->assertEquals(8, $this->object[0]);
        $this->assertEquals(7, $this->object[1]);
    }

    /**
     * @covers ArrayList::removeAt
     */
    public function testRemoveAt() {
        $this->assertEquals(3, $this->object->removeAt(0));
        $this->assertCount(2, $this->object);
        $this->assertEquals(8, $this->object->removeAt(1));
        $this->assertCount(1, $this->object);
    }

    /**
     * @covers ArrayList::toArray
     */
    public function testToArray() {
        $array = $this->object->toArray();
        $this->assertInternalType('array', $array);
        $this->assertCount(3, $array);
        $this->assertEquals(array(3, 5, 8), $array);
    }

    /**
     * @covers ArrayList::difference
     */
    public function testDifference() {
        $result = $this->object->difference(array(5, 3, 7));
        $this->assertInstanceOf('Packfire\Collection\ArrayList', $result);
        $this->assertCount(1, $result);
        $this->assertEquals(8, $result[0]);

        $result2 = $this->object->difference(array(8));
        $this->assertCount(2, $result2);

        $result = $result->difference(array(8));
        $this->assertInstanceOf('Packfire\Collection\ArrayList', $result);
        $this->assertCount(0, $result);
    }

    /**
     * @covers ArrayList::complement
     */
    public function testComplement() {
        $result = $this->object->complement(array(5, 3));
        $this->assertInstanceOf('Packfire\Collection\ArrayList', $result);
        $this->assertCount(1, $result);
        $this->assertEquals(8, $result[0]);
    }

    /**
     * @covers ArrayList::intersect
     */
    public function testIntersect() {
        $result = $this->object->intersect(array(2, 3));
        $this->assertInstanceOf('Packfire\Collection\ArrayList', $result);
        $this->assertCount(1, $result);
        $this->assertEquals(3, $result[0]);
    }

    /**
     * @covers ArrayList::union
     */
    public function testUnion() {
        $result = $this->object->union(array(8, 6));
        $this->assertInstanceOf('Packfire\Collection\ArrayList', $result);
        $this->assertCount(5, $result);
        $this->assertEquals(3, $result[0]);
    }

    /**
     * @covers ArrayList::append
     */
    public function testAppend() {
        $this->object->append(array(6, 4));
        $this->assertCount(5, $this->object);
        $this->assertEquals(6, $this->object[3]);
        $this->object->append(new ArrayList(array(1, 11)));
        $this->assertCount(7, $this->object);
        $this->assertEquals(1, $this->object[5]);
    }

    /**
     * @covers ArrayList::prepend
     */
    public function testPrepend() {
        $this->object->prepend(array(6, 4));
        $this->assertCount(5, $this->object);
        $this->assertEquals(6, $this->object[0]);
        $this->object->prepend(new ArrayList(array(1, 11)));
        $this->assertCount(7, $this->object);
        $this->assertEquals(1, $this->object[0]);
    }

    /**
     * @covers ArrayList::getIterator
     */
    public function testGetIterator() {
        $this->assertInstanceOf('\ArrayIterator', $this->object->getIterator());
    }

    /**
     * @covers ArrayList::offsetExists
     */
    public function testOffsetExists() {
        $this->assertTrue($this->object->offsetExists(1));
        $this->assertTrue($this->object->offsetExists(2));
        $this->assertFalse($this->object->offsetExists(12));
        $this->assertFalse($this->object->offsetExists(-5));
    }

    /**
     * @covers ArrayList::offsetGet
     */
    public function testOffsetGet() {
        $this->assertEquals(3, $this->object->offsetGet(0));
        $this->assertEquals(8, $this->object->offsetGet(2));
    }

    /**
     * @covers ArrayList::offsetSet
     */
    public function testOffsetSet() {
        $this->object->offsetSet(0, 100);
        $this->assertEquals(100, $this->object[0]);
        $this->object->offsetSet(2, 50);
        $this->assertEquals(50, $this->object[2]);

        // cannot set to a key that does not exists
    }

    /**
     * @covers ArrayList::offsetSet
     * @expectedException Packfire\Exception\OutOfRangeException
     */
    public function testOffsetSetFail(){
        $this->object->offsetSet(20, 10);
        $this->assertNull($this->object->get(20));
    }

    /**
     * @covers ArrayList::offsetUnset
     */
    public function testOffsetUnset() {
        $this->object->offsetUnset(0);
        $this->assertCount(2, $this->object);
        $this->assertEquals(5, $this->object[0]);
    }

}