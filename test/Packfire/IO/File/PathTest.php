<?php

namespace Packfire\IO\File;

/**
 * Test class for Path.
 * Generated by PHPUnit on 2012-07-16 at 05:15:13.
 */
class PathTest extends \PHPUnit_Framework_TestCase {

    private $dir;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->dir = Path::fileName(__FILE__) . DIRECTORY_SEPARATOR . 'test';
        if (is_dir($this->dir)) {
            rmdir($this->dir);
        }
        if (is_dir(dirname($this->dir))) {
            rmdir(dirname($this->dir));
        }
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        if (is_dir($this->dir)) {
            rmdir($this->dir);
        }
        if (is_dir(dirname($this->dir))) {
            rmdir(dirname($this->dir));
        }
    }

    /**
     * @covers Path::create
     */
    public function testCreate() {
        $path = new Path($this->dir);
        $this->assertFalse(System::pathExists($this->dir));
        $path->create();
        $this->assertTrue(System::pathExists($this->dir));
    }

    /**
     * @covers Path::exists
     */
    public function testExists() {
        $path = new Path($this->dir);
        $this->assertFalse($path->exists());
        $path->create();
        $this->assertTrue($path->exists());
        $path->delete();
        $this->assertFalse($path->exists());
    }

    /**
     * @covers Path::permission
     */
    public function testPermission() {
        $path = new Path($this->dir);
        $path->create();
        $permission = $path->permission();
        $this->assertEquals(substr(decoct(fileperms($this->dir)), 2), $permission);
    }

    /**
     * @covers Path::delete
     */
    public function testDelete() {
        $path = new Path($this->dir);
        $path->create();
        $this->assertTrue(System::pathExists($this->dir));
        $path->delete();
        $this->assertFalse(System::pathExists($this->dir));
    }

    /**
     * @covers Path::copy
     */
    public function testCopy() {
        $copy = Path::fileName(__FILE__) . '2';
        @rmdir($copy . DIRECTORY_SEPARATOR . 'test');
        @rmdir($copy);
        $original = new Path($this->dir);
        $original->create();
        Path::copy(dirname($this->dir), $copy);
        $this->assertTrue(is_dir($copy));
        $this->assertTrue(is_dir($copy . DIRECTORY_SEPARATOR . 'test'));
        @rmdir($copy . DIRECTORY_SEPARATOR . 'test');
        @rmdir($copy);
    }

    /**
     * @covers Path::clear
     */
    public function testClear() {
        $original = new Path($this->dir);
        $original->create();
        $path = new Path(dirname($this->dir));
        $path->clear();
        $this->assertFalse(is_dir($this->dir));
        $this->assertTrue(is_dir(dirname($this->dir)));
    }

    /**
     * @covers Path::combine
     */
    public function testCombine1() {
        $path = DIRECTORY_SEPARATOR . 'var' . DIRECTORY_SEPARATOR . 'test' . DIRECTORY_SEPARATOR . 'call' . DIRECTORY_SEPARATOR . 'me' . DIRECTORY_SEPARATOR . 'maybe';
        $this->assertEquals($path, Path::combine('/var/test', 'call/me/maybe'));
        $this->assertEquals($path, Path::combine('/var/test/bye', '../call/me/maybe'));
    }

    /**
     * @covers Path::combine
     */
    public function testCombine2() {
        $path = 'C:' . DIRECTORY_SEPARATOR . 'workspace' . DIRECTORY_SEPARATOR . 'projects' . DIRECTORY_SEPARATOR . 'packfire';
        $this->assertEquals($path, Path::combine('C:\\workspace', 'projects\\packfire'));
        $this->assertEquals($path, Path::combine('C:\\workspace\\taco', '../projects/packfire'));
    }

    /**
     * @covers Path::temPath
     */
    public function testTemPath() {
        $this->assertNotEmpty(Path::tempPath());
        $this->assertEquals(sys_get_temp_dir(), Path::tempPath());
    }

    /**
     * @covers Path::fileName
     */
    public function testFileName() {
        $this->assertEquals('test', Path::fileName('C:\\michael\\jackson\\this_is_it\\test.bak'));
        $this->assertEquals('test', Path::fileName('/opt/ion/is/not/yours/test.bin'));
        $this->assertEquals('test', Path::fileName('jordan\\test.bak'));
        $this->assertEquals('test', Path::fileName('runner/test.bin'));
    }

    /**
     * @covers Path::baseName
     */
    public function testBaseName() {
        $this->assertEquals('test.bak', Path::baseName('C:\\michael\\jackson\\this_is_it\\test.bak'));
        $this->assertEquals('test.bin', Path::baseName('/opt/ion/is/not/yours/test.bin'));
        $this->assertEquals('test.bak', Path::baseName('jordan\\test.bak'));
        $this->assertEquals('test.bin', Path::baseName('runner/test.bin'));
    }

    /**
     * @covers Path::extension
     */
    public function testExtension() {
        $this->assertEquals('bak', Path::extension('C:\\michael\\jackson\\this_is_it\\test.bak'));
        $this->assertEquals('bin', Path::extension('/opt/ion/is/not/yours/test.bin'));
        $this->assertEquals('bak', Path::extension('jordan\\test.bak'));
        $this->assertEquals('bin', Path::extension('runner/test.bin'));
        $this->assertNull(Path::extension('runner/test'));
    }

    /**
     * @covers Path::path
     */
    public function testPath() {
        $this->assertEquals(Path::normalize('C:\\michael\\jackson\\this_is_it'), Path::path('C:\\michael\\jackson\\this_is_it\\test.bak'));
        $this->assertEquals(Path::normalize('/opt/ion/is/not/yours'), Path::path('/opt/ion/is/not/yours/test.bin'));
        $this->assertEquals('jordan', Path::path('jordan\\test.bak'));
        $this->assertEquals('runner', Path::path('runner/test.bin'));
    }

    /**
     * @covers Path::pathInfo
     */
    public function testPathInfo() {
        $this->assertCount(4, Path::pathInfo('/opt/ion/is/not/yours/test.bin'));
        $this->assertEquals('bin', Path::pathInfo('/opt/ion/is/not/yours/test.bin', PathPart::EXTENSION));
        $this->assertCount(3, Path::pathInfo('/opt/ion/is/not/yours/test'));
    }

    /**
     * @covers Path::pathInfo
     */
    public function testPathInfoNull() {
        $this->assertNull(Path::pathInfo('/opt/ion/is/not/yours/test', PathPart::EXTENSION));
    }

    /**
     * @covers Path::currentWorkingPath
     */
    public function testCurrentWorkingPath() {
        $this->assertNotEmpty(Path::currentWorkingPath());
        $this->assertEquals(getcwd(), Path::currentWorkingPath());
    }

    /**
     * @covers Path::scriptPath
     */
    public function testScriptPath() {
        $this->assertNotEmpty(Path::scriptPath());
        $this->assertEquals(Path::normalize(dirname($_SERVER['SCRIPT_NAME'])), Path::scriptPath());
    }

    /**
     * @covers Path::classPathName
     */
    public function testClassPathName() {
        $this->assertEquals(__FILE__, Path::classPathName('Packfire\IO\File\PathTest'));
    }

    /**
     * @covers Path::relativePath
     */
    public function testRelativePath() {
        $this->assertEquals(Path::normalize('root/b/b.php'), Path::relativePath('/home/a.php', '/home/root/b/b.php'));
        $this->assertEquals(Path::normalize('../../root/b/b.php'), Path::relativePath('/home/apache/a/a.php', '/home/root/b/b.php'));
        $this->assertEquals(Path::normalize('../../apache/htdocs/b/en/b.php'), Path::relativePath('/home/root/a/a.php', '/home/apache/htdocs/b/en/b.php'));
    }

}