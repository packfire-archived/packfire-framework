<?php
namespace Packfire\IO\File;

/**
 * Test class for File.
 * Generated by PHPUnit on 2012-06-16 at 08:46:42.
 */
class FileTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var \Packfire\IO\File\File
     */
    protected $normalFile;

    /**
     * @var \Packfire\IO\File\File
     */
    protected $dirFile;

    /**
     * @var \Packfire\IO\File\File
     */
    protected $ghostFile;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->normalFile = new File(__FILE__);
        $this->dirFile = new File(dirname(__FILE__));
        $this->ghostFile = new File(__FILE__ . 'ghostbusters');
        if($this->ghostFile->exists()){
            $this->ghostFile->delete();
        }
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        if($this->ghostFile->exists()){
            $this->ghostFile->delete();
        }
    }

    /**
     * @covers \Packfire\IO\File\File::size
     */
    public function testSize() {
        $this->assertTrue($this->normalFile->size() > 0);
        $this->assertEquals(0, $this->dirFile->size());
        $this->assertEquals(0, $this->ghostFile->size());
    }

    /**
     * @covers \Packfire\IO\File\File::create
     * @covers \Packfire\IO\File\File::exists
     * @covers \Packfire\IO\File\File::delete
     */
    public function testCreate() {
        $this->assertFalse($this->ghostFile->exists());
        $this->ghostFile->create();
        $this->assertTrue($this->ghostFile->exists());
        $this->ghostFile->delete();
        $this->assertFalse($this->ghostFile->exists());
    }

    /**
     * @covers \Packfire\IO\File\File::write
     */
    public function testWrite() {
        $this->assertFalse($this->ghostFile->exists());
        $this->ghostFile->write('test');
        $this->assertTrue($this->ghostFile->exists());
        $this->assertEquals('test', $this->ghostFile->read());
    }

    /**
     * @covers \Packfire\IO\File\File::append
     */
    public function testAppend() {
        $this->assertFalse($this->ghostFile->exists());
        $this->ghostFile->create();
        $this->ghostFile->append('test');
        $this->ghostFile->append(' is great!');
        $this->assertEquals('test is great!', $this->ghostFile->read());
    }

    /**
     * @covers \Packfire\IO\File\File::copy
     */
    public function testCopy() {
        $file = $this->normalFile->copy($this->ghostFile->pathname());
        $this->assertInstanceOf('Packfire\IO\File\File', $file);
        $this->assertEquals($this->ghostFile->pathname(), $file->pathname());
        $this->assertTrue($this->ghostFile->exists());
        $this->assertEquals($this->normalFile->size(), $this->ghostFile->size());
        $this->assertEquals($this->normalFile->size(), $file->size());
    }

    /**
     * @covers \Packfire\IO\File\File::pathname
     */
    public function testPathname() {
        $this->assertEquals(__FILE__, $this->normalFile->pathname());
    }

    /**
     * @covers \Packfire\IO\File\File::rename
     */
    public function testRename() {
        $this->ghostFile->create();
        $this->assertFileExists($this->ghostFile->pathname());
        $this->ghostFile->rename('radio');
        $this->assertFileExists($this->ghostFile->pathname());
        $this->assertEquals(dirname(__FILE__) . DIRECTORY_SEPARATOR . 'radio', $this->ghostFile->pathname());
        $this->ghostFile->delete();
        $this->assertFileNotExists('radio');
    }

    /**
     * @covers \Packfire\IO\File\File::move
     */
    public function testMove() {
        $this->ghostFile->create();
        $this->ghostFile->move('..');
        $this->assertFileExists($this->ghostFile->pathname());
        $this->assertEquals('..'.DIRECTORY_SEPARATOR.'FileTest.phpghostbusters', $this->ghostFile->pathname());
        $this->ghostFile->delete();
        $this->assertFileNotExists('..'.DIRECTORY_SEPARATOR.'FileTest.phpghostbusters');
    }

    /**
     * @covers \Packfire\IO\File\File::lastModified
     */
    public function testLastModified() {
        $lmdt = $this->normalFile->lastModified();
        $this->assertInstanceOf('Packfire\DateTime\DateTime', $lmdt);
        $this->assertEquals(filemtime($this->normalFile->pathname()), $lmdt->toTimestamp());
    }

    /**
     * @covers \Packfire\IO\File\File::lastModified
     * @expectedException \Packfire\Exception\IOException
     */
    public function testLastModified2() {
        $this->ghostFile->lastModified();
    }

    /**
     * @covers \Packfire\IO\File\File::permission
     */
    public function testPermissions() {
        $permission = $this->normalFile->permission();
        $this->assertEquals(substr(decoct(fileperms($this->normalFile->pathname())), 2), $permission);
    }

    /**
     * @covers \Packfire\IO\File\File::stream
     */
    public function testStream() {
        $this->assertInstanceof('Packfire\IO\File\Stream', $this->normalFile->stream());
    }

}
