<?php

namespace Packfire\Data\Serialization;

use Packfire\Text\TextStream;

/**
 * Test class for JsonSerializer.
 * Generated by PHPUnit on 2012-06-13 at 07:45:09.
 */
class JsonSerializerTest extends \PHPUnit_Framework_TestCase {

    /**
     *
     * @var \Packfire\Data\Serialization\JsonSerializer
     */
    private $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new JsonSerializer();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers \Packfire\Data\Serialization\JsonSerializer::serialize
     */
    public function testSerialize() {
        $data = array('key' => 'value', 'test');
        $stream = new TextStream();
        $this->object->serialize($stream, $data);
        $stream->seek(0);
        $this->assertEquals('{"key":"value","0":"test"}', $stream->read($stream->length()));
    }

    /**
     * @covers \Packfire\Data\Serialization\JsonSerializer::serialize
     */
    public function testSerialize2() {
        $data = new \stdClass();
        $data->test = 'data';
        $data->control = array('date' => true);
        $stream = new TextStream();
        $this->object->serialize($stream, $data);
        $stream->seek(0);
        $this->assertEquals('{"test":"data","control":{"date":true}}', $stream->read($stream->length()));
    }

    /**
     * @covers \Packfire\Data\Serialization\JsonSerializer::serialize
     */
    public function testSerialize3() {
        $data = new \stdClass();
        $data->test = 'data';
        $data->control = array('date' => true);
        $result = $this->object->serialize($data);
        $this->assertEquals('{"test":"data","control":{"date":true}}', $result);
    }

    /**
     * @covers \Packfire\Data\Serialization\JsonSerializer::serialize
     */
    public function testSerialize4() {
        $meta = array(
            'test' => 'data',
            'control' => array(
                'date' => true
            )
        );
        $data = $this->getMock('Packfire\Data\Serialization\ISerializable');
        $data->expects($this->once())
                ->method('serialize')
                ->will($this->returnValue($meta));
        $result = $this->object->serialize($data);
        $this->assertEquals('{"test":"data","control":{"date":true}}', $result);
    }

    /**
     * @covers \Packfire\Data\Serialization\JsonSerializer::serialize
     */
    public function testSerialize5() {
        $meta = array(
            'test' => 'data',
            'control' => array(
                'date' => true
            )
        );
        $data = $this->getMock('Packfire\Data\Serialization\ISerializable');
        $data->expects($this->once())
                ->method('serialize')
                ->will($this->returnValue($meta));
        $stream = new TextStream();
        $this->object->serialize($stream, $data);
        $stream->seek(0);
        $this->assertEquals('{"test":"data","control":{"date":true}}', $stream->read($stream->length()));
    }

    /**
     * @covers \Packfire\Data\Serialization\JsonSerializer::deserialize
     */
    public function testDeserialize() {
        $data = array('key' => 'value', 'arr' => array('test'));
        $stream = new TextStream('{"key":"value","arr":["test"]}');
        $item = (array) $this->object->deserialize($stream);
        $this->assertEquals($data, $item);
    }

    /**
     * @covers \Packfire\Data\Serialization\JsonSerializer::deserialize
     */
    public function testDeserialize2() {
        $data = new \stdClass();
        $data->test = 'data';
        $data->control = new \stdClass();
        $data->control->date = true;
        $stream = new TextStream('{"test":"data","control":{"date":true}}');
        $item = $this->object->deserialize($stream);
        $this->assertEquals($data, $item);
    }

    /**
     * @covers \Packfire\Data\Serialization\JsonSerializer::deserialize
     */
    public function testDeserialize3() {
        $data = new \stdClass();
        $data->test = 'data';
        $data->control = new \stdClass();
        $data->control->date = true;
        $item = $this->object->deserialize('{"test":"data","control":{"date":true}}');
        $this->assertEquals($data, $item);
    }

    /**
     * @covers \Packfire\Data\Serialization\JsonSerializer::serialize
     * @covers \Packfire\Data\Serialization\JsonSerializer::deserialize
     */
    public function testOverall() {
        $data = new \stdClass();
        $data->test = 'data';
        $data->control = new \stdClass();
        $data->control->date = true;
        $item = $this->object->deserialize($this->object->serialize($data));
        $this->assertEquals($data, $item);
    }

}