<?php
namespace Packfire\Data\Serialization;

use Packfire\Text\TextStream;

/**
 * Test class for PhpSerializer.
 * Generated by PHPUnit on 2012-06-13 at 09:41:16.
 */
class PhpSerializerTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var PhpSerializer
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new PhpSerializer;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @covers PhpSerializer::serialize
     */
    public function testSerialize() {
        $data = array('key' => 'value', 'test');
        $stream = new TextStream();
        $this->object->serialize($stream, $data);
        $stream->seek(0);
        $this->assertEquals(serialize($data), $stream->read($stream->length()));
    }

    /**
     * @covers PhpSerializer::serialize
     */
    public function testSerialize2() {
        $data = new \stdClass();
        $data->test = 'data';
        $data->control = array('date' => true);
        $stream = new TextStream();
        $this->object->serialize($stream, $data);
        $stream->seek(0);
        $this->assertEquals(serialize($data), $stream->read($stream->length()));
    }

    /**
     * @covers PhpSerializer::serialize
     */
    public function testSerialize3() {
        $data = new \stdClass();
        $data->test = 'data';
        $data->control = array('date' => true);
        $result = $this->object->serialize($data);
        $this->assertEquals(serialize($data), $result);
    }

    /**
     * @covers PhpSerializer::deserialize
     */
    public function testDeserialize() {
        $data = array('key' => 'value', 'test');
        $stream = new TextStream(serialize($data));
        $item = $this->object->deserialize($stream);
        $this->assertEquals($data, $item);
    }

    /**
     * @covers PhpSerializer::deserialize
     */
    public function testDeserialize2() {
        $data = new \stdClass();
        $data->test = 'data';
        $data->control = array('date' => true);
        $stream = new TextStream(serialize($data));
        $item = $this->object->deserialize($stream);
        $this->assertEquals($data, $item);
    }

    /**
     * @covers PhpSerializer::deserialize
     */
    public function testDeserialize3() {
        $data = new \stdClass();
        $data->test = 'data';
        $data->control = array('date' => true);
        $result = $this->object->deserialize(serialize($data));
        $this->assertEquals($data, $result);
    }

    public function testOverall(){
        $data = new \stdClass();
        $data->test = 'data';
        $data->control = array('date' => true);
        $item = $this->object->deserialize($this->object->serialize($data));
        $this->assertEquals($data, $item);
    }

}