<?php
namespace Packfire\Route\Http;

use Packfire\Collection\Map;
require_once('test/Mocks/RouteRequest.php');
use Packfire\Test\Mocks\RouteRequest;

/**
 * Test class for Router.
 * Generated by PHPUnit on 2012-03-25 at 13:34:52.
 */
class RouterTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Router
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Router();
        $config = new Map(array('rewrite' => '/home', 'actual' => 'Rest'));
        $this->object->add('route.home', new Route('route.home', $config));
        $config = new Map(array('rewrite' => '/home/{data}', 'actual' => 'Rest', 'method' => null, 'remap' => array('data'), 'params' => array('data' => 'int')));
        $this->object->add('route.homeData', new Route('route.homeData', $config));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @covers pRouter::add
     */
    public function testAdd() {
        $this->assertCount(2, $this->object->entries());
        $config = new Map(array('rewrite' => '/test', 'actual' => 'Rest:cool'));
        $this->object->add('route.test', new Route('route.test', $config));
        $this->assertCount(3, $this->object->entries());
        $this->assertEquals('/test', $this->object->entries()->get('route.test')->rewrite());
    }

    /**
     * @covers Router::entries
     */
    public function testEntries() {
        $this->assertCount(2, $this->object->entries());
        $this->assertInstanceOf('Packfire\Collection\Map', $this->object->entries());
    }

    /**
     * @covers Router::route
     */
    public function testRoute() {
        $request = new RouteRequest('home/200',
                array('PHP_SELF' => 'index.php/home/200', 'SCRIPT_NAME' => 'index.php'));
        $route = $this->object->route($request);
        $this->assertInstanceOf('Packfire\Route\Http\Route', $route);
        $this->assertEquals(200, $route->params()->get('data'));
    }

    /**
     * @covers Router::route
     */
    public function testRoute2() {
        $request = new RouteRequest('home/500',
                array('PHP_SELF' => 'index.php/home/500', 'SCRIPT_NAME' => 'index.php'));
        $route = $this->object->route($request);
        $this->assertInstanceOf('Packfire\Route\Http\Route', $route);
        $this->assertEquals('500', $route->params()->get('data'));
    }

    /**
     * @covers Router::route
     */
    public function testRoute3() {
        $request = new RouteRequest('home/a',
                array('PHP_SELF' => 'index.php/home/a', 'SCRIPT_NAME' => 'index.php'));
        $route = $this->object->route($request);
        $this->assertNull($route);
    }

    /**
     * @covers Router::to
     */
    public function testTo() {
        $this->assertEquals('/home', $this->object->to('route.home'));
    }

}

