<?php

namespace Packfire\DateTime;

/**
 * Test class for Time.
 * Generated by PHPUnit on 2012-02-18 at 10:00:29.
 */
class TimeTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var \Packfire\DateTime\Time
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     * @covers \Packfire\DateTime\Time::__construct
     */
    protected function setUp() {
        $this->object = new Time(10, 20, 5, 100);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers \Packfire\DateTime\Time::millisecond
     */
    public function testMillisecond() {
        $this->assertEquals(100, $this->object->millisecond());

        $this->object->millisecond(200);
        $this->assertEquals(200, $this->object->millisecond());

        $second = $this->object->second();
        $this->object->millisecond(2400);
        $this->assertEquals(400, $this->object->millisecond());
        $this->assertEquals($second + 2, $this->object->second());
    }

    /**
     * @covers \Packfire\DateTime\Time::second
     */
    public function testSecond() {
        $this->assertEquals(5, $this->object->second());

        $this->object->second(20);
        $this->assertEquals(20, $this->object->second());
    }

    /**
     * @covers \Packfire\DateTime\Time::second
     */
    public function testSecond2() {
        $minute = $this->object->minute();
        $this->object->second(70);
        $this->assertEquals(10, $this->object->second());
        $this->assertEquals($minute + 1, $this->object->minute());
    }

    /**
     * @covers \Packfire\DateTime\Time::second
     */
    public function testSecond3() {
        $minute = $this->object->minute();
        $this->object->second(130);
        $this->assertEquals(10, $this->object->second());
        $this->assertEquals($minute + 2, $this->object->minute());
    }

    /**
     * @covers \Packfire\DateTime\Time::minute
     */
    public function testMinute() {
        $this->assertEquals(20, $this->object->minute());

        $this->object->minute(50);
        $this->assertEquals(50, $this->object->minute());
    }

    /**
     * @covers \Packfire\DateTime\Time::minute
     */
    public function testMinute2() {
        $hour = $this->object->hour();
        $this->object->minute(200);
        $this->assertEquals(20, $this->object->minute());
        $this->assertEquals($hour + 3, $this->object->hour());
    }

    /**
     * @covers \Packfire\DateTime\Time::minute
     */
    public function testMinute3() {
        $hour = $this->object->hour();
        $this->object->minute(600);
        $this->assertEquals(0, $this->object->minute());
        $this->assertEquals($hour + 10, $this->object->hour());
    }

    /**
     * @covers \Packfire\DateTime\Time::hour
     */
    public function testHour() {
        $this->assertEquals(10, $this->object->hour());

        $this->object->hour(23);
        $this->assertEquals(23, $this->object->hour());

        $this->object->hour(25);
        $this->assertEquals(1, $this->object->hour());

        $this->object->hour(48);
        $this->assertEquals(0, $this->object->hour());

        $this->object->hour(-3);
        $this->assertEquals(21, $this->object->hour());
    }

    /**
     * @covers \Packfire\DateTime\Time::totalSeconds
     */
    public function testTotalSeconds() {
        $this->assertEquals(37205.1, $this->object->totalSeconds());
        $this->object->second($this->object->second() + 2);
        $this->assertEquals(37207.1, $this->object->totalSeconds());
    }

    /**
     * @covers \Packfire\DateTime\Time::add
     */
    public function testAdd() {
        $time = new Time(22, 20, 59, 500);
        $result = $this->object->add($time);
        $this->assertEquals(8, $result->hour());
        $this->assertEquals(41, $result->minute());
        $this->assertEquals(4, $result->second());
        $this->assertEquals(600, $result->millisecond());
    }

    /**
     * @covers \Packfire\DateTime\Time::subtract
     */
    public function testSubtract() {
        $time = new Time(8, 20, 59, 500);
        $result = $this->object->subtract($time);
        $this->assertEquals(1, $result->hour());
        $this->assertEquals(59, $result->minute());
        $this->assertEquals(5, $result->second());
        $this->assertEquals(600, $result->millisecond());
    }

    /**
     * @covers \Packfire\DateTime\Time::compareTo
     */
    public function testCompareTo() {
        $time1 = new Time(8, 20, 59, 500);
        $time2 = new Time(22, 20, 59, 500);
        $this->assertEquals(1, $time1->compareTo($this->object));
        $this->assertEquals(0, $time1->compareTo($time1));
        $this->assertEquals(-1, $this->object->compareTo($time1));
        $this->assertEquals(1, $time1->compareTo($time2));
        $this->assertEquals(-1, $time2->compareTo($this->object));
    }

}
