<?php
namespace Packfire\DateTime;

/**
 * Test class for DateTime.
 * Generated by PHPUnit on 2012-04-28 at 02:31:37.
 */
class DateTimeTest extends \PHPUnit_Framework_TestCase
{
    public function __construct()
    {
        parent::__construct();
        date_default_timezone_set('UTC');
    }

    /**
     * @var \Packfire\DateTime\DateTime
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new DateTime(1999, 6, 24, 10, 30, 35);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers \Packfire\DateTime\DateTime::timezone
     */
    public function testTimezone()
    {
        $this->assertEquals(0, $this->object->timezone());

        $this->object->timezone(-5);
        $this->assertEquals(-5, $this->object->timezone());
        $this->assertEquals(5, $this->object->time()->hour());

        $this->object->timezone(12);
        $this->assertEquals(22, $this->object->time()->hour());
        $this->assertEquals(24, $this->object->day());

        $this->object->timezone(-12);
        $this->assertEquals(22, $this->object->time()->hour());
        $this->assertEquals(23, $this->object->day());
    }

    /**
     * @covers \Packfire\DateTime\DateTime::time
     */
    public function testTime()
    {
        $this->assertInstanceOf('Packfire\DateTime\Time', $this->object->time());
        $this->assertEquals(10, $this->object->time()->hour());
        $this->assertEquals(30, $this->object->time()->minute());
        $this->assertEquals(35, $this->object->time()->second());
    }

    /**
     * @covers \Packfire\DateTime\DateTime::dayOfWeek
     */
    public function testDayOfWeek()
    {
        $this->assertEquals(DaysOfWeek::THURSDAY, $this->object->dayOfWeek());
        $this->object->day(26);
        $this->assertEquals(DaysOfWeek::SATURDAY, $this->object->dayOfWeek());
        $this->object->day(21);
        $this->assertEquals(DaysOfWeek::MONDAY, $this->object->dayOfWeek());
    }

    /**
     * @covers \Packfire\DateTime\DateTime::isLeapYear
     */
    public function testIsLeapYear()
    {
        $this->assertFalse(DateTime::isLeapYear(1999));
        $this->assertFalse(DateTime::isLeapYear(2013));
        $this->assertFalse(DateTime::isLeapYear(1963));
        $this->assertFalse(DateTime::isLeapYear(3021));
        $this->assertFalse(DateTime::isLeapYear(1000));
        $this->assertTrue(DateTime::isLeapYear(1996));
        $this->assertTrue(DateTime::isLeapYear(1200));
        $this->assertTrue(DateTime::isLeapYear(1992));
        $this->assertTrue(DateTime::isLeapYear(2000));
        $this->assertTrue(DateTime::isLeapYear(2012));
    }

    /**
     * @covers \Packfire\DateTime\DateTime::daysInMonth
     */
    public function testDaysInMonth()
    {
        $this->assertEquals(31, DateTime::daysInMonth(10));
        $this->assertEquals(30, DateTime::daysInMonth(11));
        $this->assertEquals(31, DateTime::daysInMonth(12));
        $this->assertEquals(31, DateTime::daysInMonth(12, 1992));
        $this->assertEquals(29, DateTime::daysInMonth(2, 1992));
        $this->assertEquals(28, DateTime::daysInMonth(2, 2001));
        $this->assertEquals(31, DateTime::daysInMonth(1, 1992));
        $this->assertEquals(30, DateTime::daysInMonth(4, 1992));
    }

    /**
     * @covers \Packfire\DateTime\DateTime::now
     */
    public function testNow()
    {
        $now = DateTime::now();
        $this->assertInstanceOf('Packfire\DateTime\DateTime', $now);
        $this->assertEquals(gmdate('Y'), $now->year());
    }

    /**
     * @covers \Packfire\DateTime\DateTime::fromTimestamp
     */
    public function testFromTimestamp()
    {
        $timestamp = time();
        $obj = DateTime::fromTimestamp($timestamp);
        $this->assertEquals(gmdate('j', $timestamp), $obj->day());
        $this->assertEquals(gmdate('Y', $timestamp), $obj->year());
        $this->assertEquals(gmdate('m', $timestamp), $obj->month());
        $this->assertEquals(gmdate('H', $timestamp), $obj->time()->hour());
        $this->assertEquals(gmdate('i', $timestamp), $obj->time()->minute());
        $this->assertEquals(gmdate('s', $timestamp), $obj->time()->second());
    }

    /**
     * @covers \Packfire\DateTime\DateTime::toTimestamp
     */
    public function testToTimestamp()
    {
        $timestamp = $this->object->toTimestamp();
        $this->assertInternalType('integer', $timestamp);
        $this->assertTrue($timestamp > 0);
        $this->assertEquals($this->object->day(), gmdate('j', $timestamp));
        $this->assertEquals($this->object->month(), gmdate('m', $timestamp));
        $this->assertEquals($this->object->year(), gmdate('Y', $timestamp));
        $this->assertEquals($this->object->time()->hour(), gmdate('H', $timestamp));
        $this->assertEquals($this->object->time()->minute(), gmdate('i', $timestamp));
        $this->assertEquals($this->object->time()->second(), gmdate('s', $timestamp));
    }

    /**
     * @covers \Packfire\DateTime\DateTime::convertTimezone
     */
    public function testConvertTimezone()
    {
        $dt = DateTime::convertTimezone($this->object, '-2');
        $this->assertEquals($this->object->time()->hour() - 2, $dt->time()->hour());
        $this->assertEquals($this->object->day(), $dt->day());
        $this->assertEquals($this->object->month(), $dt->month());
        $this->assertEquals($this->object->year(), $dt->year());
    }

    /**
     * @covers \Packfire\DateTime\DateTime::convertTimezone
     */
    public function testConvertTimezone2()
    {
        $dt = DateTime::convertTimezone($this->object, '8');
        $this->assertEquals(18, $dt->time()->hour());
        $this->assertEquals($this->object->day(), $dt->day());
        $this->assertEquals($this->object->month(), $dt->month());
        $this->assertEquals($this->object->year(), $dt->year());
    }

    /**
     * @covers \Packfire\DateTime\DateTime::convertTimezone
     */
    public function testConvertTimezone3()
    {
        $dt = DateTime::convertTimezone($this->object, '12');
        $this->assertEquals(22, $dt->time()->hour());
        $this->assertEquals($this->object->day(), $dt->day());
        $this->assertEquals($this->object->month(), $dt->month());
        $this->assertEquals($this->object->year(), $dt->year());
    }

    /**
     * @covers \Packfire\DateTime\DateTime::convertTimezone
     */
    public function testConvertTimezone4()
    {
        $dt = DateTime::convertTimezone($this->object, '-11');
        $this->assertEquals(23, $dt->time()->hour());
        $this->assertEquals($this->object->day() - 1, $dt->day());
        $this->assertEquals($this->object->month(), $dt->month());
        $this->assertEquals($this->object->year(), $dt->year());
    }

    /**
     * @covers \Packfire\DateTime\DateTime::fromString
     */
    public function testFromString()
    {
        $case = DateTime::fromString('1986-5-23');
        $this->assertEquals(1986, $case->year());
        $this->assertEquals(5, $case->month());
        $this->assertEquals(23, $case->day());
        $this->assertEquals(0, $case->time()->hour());
        $this->assertEquals(0, $case->time()->minute());
        $this->assertEquals(0, $case->time()->second());
    }

    /**
     * @covers \Packfire\DateTime\DateTime::fromString
     */
    public function testFromString2()
    {
        $case = DateTime::fromString('today');
        $this->assertEquals(gmdate('Y'), $case->year());
        $this->assertEquals(gmdate('m'), $case->month());
        $this->assertEquals(gmdate('j'), $case->day());
    }

    /**
     * @covers \Packfire\DateTime\DateTime::fromString
     */
    public function testFromString3()
    {
        $case = DateTime::fromString('1998-7-3 05:24:13+0000');
        $this->assertEquals(1998, $case->year());
        $this->assertEquals(7, $case->month());
        $this->assertEquals(3, $case->day());
        $this->assertEquals(5, $case->time()->hour());
        $this->assertEquals(24, $case->time()->minute());
        $this->assertEquals(13, $case->time()->second());
    }

    /**
     * @covers \Packfire\DateTime\DateTime::toISO8601
     */
    public function testToISO8601()
    {
        $time = time();
        $obj = DateTime::fromTimestamp($time);
        $this->assertEquals(gmdate(DateTimeFormat::ISO8601, $time), $obj->toISO8601());
    }

    /**
     * @covers \Packfire\DateTime\DateTime::toRFC822
     */
    public function testToRFC822()
    {
        $time = time();
        $obj = DateTime::fromTimestamp($time);
        $this->assertEquals(gmdate(DateTimeFormat::RFC822, $time), $obj->toRFC822());
    }

    /**
     * @covers \Packfire\DateTime\DateTime::format
     */
    public function testFormat()
    {
        $formats = array(
            'Y-m-d',
            'h:i:s',
            DateTimeFormat::ISO8601,
            DateTimeFormat::RFC3339
        );
        foreach ($formats as $format) {
            $this->assertEquals(
                gmdate($format, $this->object->toTimestamp()),
                $this->object->format($format)
            );
        }
    }

    /**
     * @covers \Packfire\DateTime\DateTime::add
     */
    public function testAdd()
    {
        $datetime = $this->object->add(new TimeSpan(7200));
        $this->assertEquals($this->object->time()->hour() + 2, $datetime->time()->hour());
    }

    /**
     * @covers \Packfire\DateTime\DateTime::add
     */
    public function testAdd2()
    {
        $datetime = $this->object->add(new TimeSpan(86400));
        $this->assertEquals($this->object->day() + 1, $datetime->day());
    }

    /**
     * @covers \Packfire\DateTime\DateTime::add
     */
    public function testAdd3()
    {
        // year: 31536000
        $datetime = $this->object->add(new TimeSpan(31622400));
        $this->assertEquals($this->object->year() + 1, $datetime->year());
    }

    /**
     * @covers \Packfire\DateTime\DateTime::subtract
     */
    public function testSubtract()
    {
        $datetime = $this->object->subtract(new TimeSpan(7200));
        $this->assertEquals($this->object->time()->hour() - 2, $datetime->time()->hour());
    }

    /**
     * @covers \Packfire\DateTime\DateTime::subtract
     */
    public function testSubtract2()
    {
        $datetime = $this->object->subtract(new TimeSpan(86400));
        $this->assertEquals($this->object->day() - 1, $datetime->day());
    }

    /**
     * @covers \Packfire\DateTime\DateTime::subtract
     */
    public function testSubtract3()
    {
        // year: 31536000
        $datetime = $this->object->subtract(new TimeSpan(31622400));
        $this->assertEquals($this->object->year() - 1, $datetime->year());
    }

    /**
     * @covers \Packfire\DateTime\DateTime::calculateAge
     */
    public function testCalculateAge()
    {
        $birthday = new DateTime(2010, 1, 1);
        $this->assertEquals(gmdate('Y') - 2010, DateTime::calculateAge($birthday));
    }

    /**
     * @covers \Packfire\DateTime\DateTime::calculateAge
     */
    public function testCalculateAge2()
    {
        // test that if birthday is next month, the age is one year less
        $now = DateTime::now();
        $birthday = new DateTime(2010, $now->month() + 1, $now->day());
        $this->assertEquals(gmdate('Y', $now->toTimestamp()) - 2011, DateTime::calculateAge($birthday));
    }

    /**
     * @covers \Packfire\DateTime\DateTime::microtime
     */
    public function testMicrotime()
    {
        $this->assertInternalType(
            \PHPUnit_Framework_Constraint_IsType::TYPE_FLOAT,
            DateTime::microtime()
        );
        $this->assertTrue(DateTime::microtime() > 0);
    }

    /**
     * @covers \Packfire\DateTime\DateTime::compareTo
     */
    public function testCompareTo()
    {
        $dt = $this->object->subtract(new TimeSpan(31622400));
        $this->assertEquals(-1, $this->object->compareTo($dt));
        $this->assertEquals(0, $dt->compareTo($dt));
        $this->assertEquals(1, $dt->compareTo($this->object));
    }
}
